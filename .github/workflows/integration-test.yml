name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  integration-test:
    name: Test npm installation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            node-version: 20
            platform: linux
            arch: x64
          - os: windows-latest
            node-version: 20
            platform: win32
            arch: x64
          - os: macos-latest
            node-version: 20
            platform: darwin
            arch: arm64
          - os: macos-13
            node-version: 20
            platform: darwin
            arch: x64
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Debug system info
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Platform: ${{ matrix.platform }}"
        echo "Architecture: ${{ matrix.arch }}"
        node -p "process.platform"
        node -p "process.arch"
        echo "Runner OS: ${{ runner.os }}"
        echo "Runner Arch: ${{ runner.arch }}"

    - name: Install Probe via npm
      run: |
        echo "Installing @buger/probe globally..."
        npm install -g @buger/probe
        echo "Installation completed"

    - name: Check binary architecture and fix if needed (macOS x64)
      if: matrix.platform == 'darwin' && matrix.arch == 'x64'
      run: |
        echo "Checking binary architecture for macOS x64..."
        PROBE_PATH=$(which probe)
        echo "Probe binary location: $PROBE_PATH"
        
        # Check the architecture of the installed binary
        if [ -f "$PROBE_PATH" ]; then
          echo "Current binary architecture:"
          file "$PROBE_PATH"
          lipo -archs "$PROBE_PATH" 2>/dev/null || echo "Not a universal binary or lipo failed"
          
          # Check if binary is arm64 when we need x64
          if lipo -archs "$PROBE_PATH" 2>/dev/null | grep -q "arm64" && ! lipo -archs "$PROBE_PATH" 2>/dev/null | grep -q "x86_64"; then
            echo "Found arm64 binary but need x64. Attempting to fix..."
            
            # Try to extract x64 slice if it's a universal binary
            if lipo -archs "$PROBE_PATH" 2>/dev/null | grep -q "x86_64"; then
              echo "Extracting x64 slice from universal binary..."
              lipo -thin x86_64 "$PROBE_PATH" -output "${PROBE_PATH}.x64"
              mv "${PROBE_PATH}.x64" "$PROBE_PATH"
              chmod +x "$PROBE_PATH"
            else
              echo "No x64 slice found. Binary may not be compatible."
              echo "Continuing with existing binary - test may fail."
            fi
          else
            echo "Binary architecture appears correct for x64"
          fi
        else
          echo "Probe binary not found at expected location"
          exit 1
        fi

    - name: Verify Probe installation
      run: |
        echo "Testing probe --version..."
        probe --version || {
          echo "ERROR: probe --version failed"
          echo "Binary info:"
          which probe
          ls -la $(which probe)
          file $(which probe) 2>/dev/null || echo "file command failed"
          echo "System info:"
          uname -a
          echo "Architecture check:"
          arch
          exit 1
        }
        echo "Testing probe --help..."
        probe --help | head -10 || {
          echo "ERROR: probe --help failed"
          exit 1
        }

    - name: Debug binary location (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Checking probe in PATH..."
        which probe || echo "probe not found in PATH"
        echo "Checking npm global root..."
        npm root -g
        echo "Checking probe package directory..."
        ls -la $(npm root -g)/@buger/probe/ || echo "probe package directory not found"
        echo "Checking bin directory..."
        ls -la $(npm root -g)/@buger/probe/bin/ || echo "bin directory not found"
        echo "Checking for any probe binaries..."
        find $(npm root -g)/@buger/probe/ -name "*probe*" -type f 2>/dev/null || echo "no probe binaries found"
        echo "Checking file permissions..."
        ls -la $(which probe) 2>/dev/null || echo "probe binary not accessible"
        
        # Additional architecture debugging for macOS
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          echo "macOS-specific debugging:"
          echo "System architecture: $(uname -m)"
          echo "Expected architecture: ${{ matrix.arch }}"
          if [ -f "$(which probe)" ]; then
            echo "Binary architecture details:"
            file $(which probe)
            lipo -info $(which probe) 2>/dev/null || echo "lipo info failed"
            otool -hv $(which probe) 2>/dev/null | head -10 || echo "otool failed"
          fi
        fi

    - name: Debug binary location (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Checking probe in PATH..."
        where probe
        echo "Checking npm global root..."
        npm root -g
        echo "Checking probe package directory..."
        dir "$env:APPDATA\npm\node_modules\@buger\probe\" 2>$null
        echo "Checking bin directory..."
        dir "$env:APPDATA\npm\node_modules\@buger\probe\bin\" 2>$null
        echo "Checking for any probe binaries..."
        Get-ChildItem -Path "$env:APPDATA\npm\node_modules\@buger\probe\" -Recurse -Name "*probe*" 2>$null

    - name: Test search functionality
      run: |
        probe search "semantic code search" README.md --format json > search_results.json

    - name: Verify search results (Unix)
      if: runner.os != 'Windows'
      run: |
        # Check that the JSON output contains expected fields
        if ! grep -q '"file"' search_results.json; then
          echo "Error: JSON output missing 'file' field"
          cat search_results.json
          exit 1
        fi

        if ! grep -q '"code"' search_results.json; then
          echo "Error: JSON output missing 'code' field"
          echo "Actual content:"
          cat search_results.json
          exit 1
        fi

        if ! grep -q 'README.md' search_results.json; then
          echo "Error: Search results don't contain README.md"
          cat search_results.json
          exit 1
        fi

        if ! grep -q 'semantic code search' search_results.json; then
          echo "Error: Search results don't contain the search term"
          cat search_results.json
          exit 1
        fi

        echo "✅ Search results validation passed"

    - name: Verify search results (Windows)
      if: runner.os == 'Windows'
      run: |
        # Check that the JSON output contains expected fields
        $content = Get-Content search_results.json -Raw

        if (-not ($content -match '"file"')) {
          Write-Host "Error: JSON output missing 'file' field"
          Get-Content search_results.json
          exit 1
        }

        if (-not ($content -match '"code"')) {
          Write-Host "Error: JSON output missing 'code' field"
          Write-Host "Actual content:"
          Get-Content search_results.json
          exit 1
        }

        if (-not ($content -match 'README.md')) {
          Write-Host "Error: Search results don't contain README.md"
          Get-Content search_results.json
          exit 1
        }

        if (-not ($content -match 'semantic code search')) {
          Write-Host "Error: Search results don't contain the search term"
          Get-Content search_results.json
          exit 1
        }

        Write-Host "✅ Search results validation passed"

    - name: Test extract functionality
      run: |
        probe extract README.md:1 --format json > extract_results.json

    - name: Verify extract results (Unix)
      if: runner.os != 'Windows'
      run: |
        # Check that the extract output contains expected fields
        if ! grep -q '"file"' extract_results.json; then
          echo "Error: Extract JSON output missing 'file' field"
          echo "Actual content:"
          cat extract_results.json
          exit 1
        fi

        if ! grep -q 'README.md' extract_results.json; then
          echo "Error: Extract results don't contain README.md"
          cat extract_results.json
          exit 1
        fi

        echo "✅ Extract results validation passed"

    - name: Verify extract results (Windows)
      if: runner.os == 'Windows'
      run: |
        # Check that the extract output contains expected fields
        $content = Get-Content extract_results.json -Raw

        if (-not ($content -match '"file"')) {
          Write-Host "Error: Extract JSON output missing 'file' field"
          Write-Host "Actual content:"
          Get-Content extract_results.json
          exit 1
        }

        if (-not ($content -match 'README.md')) {
          Write-Host "Error: Extract results don't contain README.md"
          Get-Content extract_results.json
          exit 1
        }

        Write-Host "✅ Extract results validation passed"

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          search_results.json
          extract_results.json
        retention-days: 7
